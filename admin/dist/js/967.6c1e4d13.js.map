{"version":3,"file":"js/967.6c1e4d13.js","mappings":"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","sources":["webpack://admin/../../packages/hooks/use-same-target/index.ts","webpack://admin/../../packages/components/overlay/src/overlay.ts","webpack://admin/../../packages/components/overlay/index.ts","webpack://admin/../../packages/components/dialog/src/dialog-content.ts","webpack://admin/../../packages/tokens/dialog.ts","webpack://admin/../../packages/hooks/use-draggable/index.ts","webpack://admin/../../packages/components/dialog/src/dialog-content.vue","webpack://admin/../../packages/components/dialog/src/dialog.ts","webpack://admin/../../packages/hooks/use-lockscreen/index.ts","webpack://admin/../../packages/components/dialog/src/use-dialog.ts","webpack://admin/../../packages/components/dialog/src/dialog.vue","webpack://admin/../../packages/components/dialog/index.ts","webpack://admin/../../packages/utils/vue/refs.ts","webpack://admin/../../packages/utils/vue/vnode.ts"],"sourcesContent":["import { NOOP } from '@vue/shared'\n\nexport const useSameTarget = (handleClick?: (e: MouseEvent) => void) => {\n  if (!handleClick) {\n    return { onClick: NOOP, onMousedown: NOOP, onMouseup: NOOP }\n  }\n\n  let mousedownTarget = false\n  let mouseupTarget = false\n  // refer to this https://javascript.info/mouse-events-basics\n  // events fired in the order: mousedown -> mouseup -> click\n  // we need to set the mousedown handle to false after click fired.\n  const onClick = (e: MouseEvent) => {\n    // if and only if\n    if (mousedownTarget && mouseupTarget) {\n      handleClick(e)\n    }\n    mousedownTarget = mouseupTarget = false\n  }\n\n  const onMousedown = (e: MouseEvent) => {\n    // marking current mousedown target.\n    mousedownTarget = e.target === e.currentTarget\n  }\n  const onMouseup = (e: MouseEvent) => {\n    // marking current mouseup target.\n    mouseupTarget = e.target === e.currentTarget\n  }\n\n  return { onClick, onMousedown, onMouseup }\n}\n","import { createVNode, defineComponent, h, renderSlot } from 'vue'\nimport { PatchFlags, buildProps, definePropType } from '@element-plus/utils'\nimport { useNamespace, useSameTarget } from '@element-plus/hooks'\n\nimport type { CSSProperties, ExtractPropTypes } from 'vue'\nimport type { ZIndexProperty } from 'csstype'\n\nexport const overlayProps = buildProps({\n  mask: {\n    type: Boolean,\n    default: true,\n  },\n  customMaskEvent: {\n    type: Boolean,\n    default: false,\n  },\n  overlayClass: {\n    type: definePropType<string | string[] | Record<string, boolean>>([\n      String,\n      Array,\n      Object,\n    ]),\n  },\n  zIndex: {\n    type: definePropType<ZIndexProperty>([String, Number]),\n  },\n} as const)\nexport type OverlayProps = ExtractPropTypes<typeof overlayProps>\n\nexport const overlayEmits = {\n  click: (evt: MouseEvent) => evt instanceof MouseEvent,\n}\nexport type OverlayEmits = typeof overlayEmits\n\nexport default defineComponent({\n  name: 'ElOverlay',\n\n  props: overlayProps,\n  emits: overlayEmits,\n\n  setup(props, { slots, emit }) {\n    const ns = useNamespace('overlay')\n\n    const onMaskClick = (e: MouseEvent) => {\n      emit('click', e)\n    }\n\n    const { onClick, onMousedown, onMouseup } = useSameTarget(\n      props.customMaskEvent ? undefined : onMaskClick\n    )\n\n    // init here\n    return () => {\n      // when the vnode meets the same structure but with different change trigger\n      // it will not automatically update, thus we simply use h function to manage updating\n      return props.mask\n        ? createVNode(\n            'div',\n            {\n              class: [ns.b(), props.overlayClass],\n              style: {\n                zIndex: props.zIndex,\n              },\n              onClick,\n              onMousedown,\n              onMouseup,\n            },\n            [renderSlot(slots, 'default')],\n            PatchFlags.STYLE | PatchFlags.CLASS | PatchFlags.PROPS,\n            ['onClick', 'onMouseup', 'onMousedown']\n          )\n        : h(\n            'div',\n            {\n              class: props.overlayClass,\n              style: {\n                zIndex: props.zIndex,\n                position: 'fixed',\n                top: '0px',\n                right: '0px',\n                bottom: '0px',\n                left: '0px',\n              } as CSSProperties,\n            },\n            [renderSlot(slots, 'default')]\n          )\n    }\n  },\n})\n","import Overlay from './src/overlay'\n\nexport const ElOverlay = Overlay\nexport default ElOverlay\n\nexport * from './src/overlay'\n","import { buildProps, iconPropType } from '@element-plus/utils'\n\nexport const dialogContentProps = buildProps({\n  center: {\n    type: Boolean,\n    default: false,\n  },\n  alignCenter: {\n    type: Boolean,\n    default: false,\n  },\n  closeIcon: {\n    type: iconPropType,\n  },\n  customClass: {\n    type: String,\n    default: '',\n  },\n  draggable: {\n    type: Boolean,\n    default: false,\n  },\n  fullscreen: {\n    type: Boolean,\n    default: false,\n  },\n  showClose: {\n    type: Boolean,\n    default: true,\n  },\n  title: {\n    type: String,\n    default: '',\n  },\n} as const)\n\nexport const dialogContentEmits = {\n  close: () => true,\n}\n","import type { CSSProperties, ComputedRef, InjectionKey, Ref } from 'vue'\nimport type { useNamespace } from '@element-plus/hooks'\n\nexport type DialogContext = {\n  dialogRef: Ref<HTMLElement | undefined>\n  headerRef: Ref<HTMLElement | undefined>\n  bodyId: Ref<string>\n  ns: ReturnType<typeof useNamespace>\n  rendered: Ref<boolean>\n  style: ComputedRef<CSSProperties>\n}\n\nexport const dialogInjectionKey: InjectionKey<DialogContext> =\n  Symbol('dialogInjectionKey')\n","import { onBeforeUnmount, onMounted, watchEffect } from 'vue'\nimport { addUnit } from '@element-plus/utils'\nimport type { ComputedRef, Ref } from 'vue'\n\nexport const useDraggable = (\n  targetRef: Ref<HTMLElement | undefined>,\n  dragRef: Ref<HTMLElement | undefined>,\n  draggable: ComputedRef<boolean>\n) => {\n  let transform = {\n    offsetX: 0,\n    offsetY: 0,\n  }\n\n  const onMousedown = (e: MouseEvent) => {\n    const downX = e.clientX\n    const downY = e.clientY\n    const { offsetX, offsetY } = transform\n\n    const targetRect = targetRef.value!.getBoundingClientRect()\n    const targetLeft = targetRect.left\n    const targetTop = targetRect.top\n    const targetWidth = targetRect.width\n    const targetHeight = targetRect.height\n\n    const clientWidth = document.documentElement.clientWidth\n    const clientHeight = document.documentElement.clientHeight\n\n    const minLeft = -targetLeft + offsetX\n    const minTop = -targetTop + offsetY\n    const maxLeft = clientWidth - targetLeft - targetWidth + offsetX\n    const maxTop = clientHeight - targetTop - targetHeight + offsetY\n\n    const onMousemove = (e: MouseEvent) => {\n      const moveX = Math.min(\n        Math.max(offsetX + e.clientX - downX, minLeft),\n        maxLeft\n      )\n      const moveY = Math.min(\n        Math.max(offsetY + e.clientY - downY, minTop),\n        maxTop\n      )\n\n      transform = {\n        offsetX: moveX,\n        offsetY: moveY,\n      }\n      targetRef.value!.style.transform = `translate(${addUnit(\n        moveX\n      )}, ${addUnit(moveY)})`\n    }\n\n    const onMouseup = () => {\n      document.removeEventListener('mousemove', onMousemove)\n      document.removeEventListener('mouseup', onMouseup)\n    }\n\n    document.addEventListener('mousemove', onMousemove)\n    document.addEventListener('mouseup', onMouseup)\n  }\n\n  const onDraggable = () => {\n    if (dragRef.value && targetRef.value) {\n      dragRef.value.addEventListener('mousedown', onMousedown)\n    }\n  }\n\n  const offDraggable = () => {\n    if (dragRef.value && targetRef.value) {\n      dragRef.value.removeEventListener('mousedown', onMousedown)\n    }\n  }\n\n  onMounted(() => {\n    watchEffect(() => {\n      if (draggable.value) {\n        onDraggable()\n      } else {\n        offDraggable()\n      }\n    })\n  })\n\n  onBeforeUnmount(() => {\n    offDraggable()\n  })\n}\n","<template>\n  <div\n    :ref=\"composedDialogRef\"\n    :class=\"[\n      ns.b(),\n      ns.is('fullscreen', fullscreen),\n      ns.is('draggable', draggable),\n      ns.is('align-center', alignCenter),\n      { [ns.m('center')]: center },\n      customClass,\n    ]\"\n    :style=\"style\"\n    tabindex=\"-1\"\n  >\n    <header ref=\"headerRef\" :class=\"ns.e('header')\">\n      <slot name=\"header\">\n        <span role=\"heading\" :class=\"ns.e('title')\">\n          {{ title }}\n        </span>\n      </slot>\n      <button\n        v-if=\"showClose\"\n        :aria-label=\"t('el.dialog.close')\"\n        :class=\"ns.e('headerbtn')\"\n        type=\"button\"\n        @click=\"$emit('close')\"\n      >\n        <el-icon :class=\"ns.e('close')\">\n          <component :is=\"closeIcon || Close\" />\n        </el-icon>\n      </button>\n    </header>\n    <div :id=\"bodyId\" :class=\"ns.e('body')\">\n      <slot />\n    </div>\n    <footer v-if=\"$slots.footer\" :class=\"ns.e('footer')\">\n      <slot name=\"footer\" />\n    </footer>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { FOCUS_TRAP_INJECTION_KEY } from '@element-plus/components/focus-trap'\nimport { useDraggable, useLocale } from '@element-plus/hooks'\nimport { CloseComponents, composeRefs } from '@element-plus/utils'\nimport { dialogInjectionKey } from '@element-plus/tokens'\nimport { dialogContentEmits, dialogContentProps } from './dialog-content'\n\nconst { t } = useLocale()\nconst { Close } = CloseComponents\n\ndefineOptions({ name: 'ElDialogContent' })\nconst props = defineProps(dialogContentProps)\ndefineEmits(dialogContentEmits)\n\nconst { dialogRef, headerRef, bodyId, ns, style } = inject(dialogInjectionKey)!\nconst { focusTrapRef } = inject(FOCUS_TRAP_INJECTION_KEY)!\n\nconst composedDialogRef = composeRefs(focusTrapRef, dialogRef)\n\nconst draggable = computed(() => props.draggable)\nuseDraggable(dialogRef, headerRef, draggable)\n</script>\n","import { buildProps, definePropType, isBoolean } from '@element-plus/utils'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { dialogContentProps } from './dialog-content'\n\nimport type { ExtractPropTypes } from 'vue'\n\ntype DoneFn = (cancel?: boolean) => void\nexport type DialogBeforeCloseFn = (done: DoneFn) => void\n\nexport const dialogProps = buildProps({\n  ...dialogContentProps,\n  appendToBody: {\n    type: Boolean,\n    default: false,\n  },\n  beforeClose: {\n    type: definePropType<DialogBeforeCloseFn>(Function),\n  },\n  destroyOnClose: {\n    type: Boolean,\n    default: false,\n  },\n  closeOnClickModal: {\n    type: Boolean,\n    default: true,\n  },\n  closeOnPressEscape: {\n    type: Boolean,\n    default: true,\n  },\n  lockScroll: {\n    type: Boolean,\n    default: true,\n  },\n  modal: {\n    type: Boolean,\n    default: true,\n  },\n  openDelay: {\n    type: Number,\n    default: 0,\n  },\n  closeDelay: {\n    type: Number,\n    default: 0,\n  },\n  top: {\n    type: String,\n  },\n  modelValue: {\n    type: Boolean,\n    default: false,\n  },\n  modalClass: String,\n  width: {\n    type: [String, Number],\n  },\n  zIndex: {\n    type: Number,\n  },\n  trapFocus: {\n    type: Boolean,\n    default: false,\n  },\n} as const)\n\nexport type DialogProps = ExtractPropTypes<typeof dialogProps>\n\nexport const dialogEmits = {\n  open: () => true,\n  opened: () => true,\n  close: () => true,\n  closed: () => true,\n  [UPDATE_MODEL_EVENT]: (value: boolean) => isBoolean(value),\n  openAutoFocus: () => true,\n  closeAutoFocus: () => true,\n}\nexport type DialogEmits = typeof dialogEmits\n","import { isRef, onScopeDispose, watch } from 'vue'\nimport { computed } from '@vue/reactivity'\nimport { isClient } from '@vueuse/core'\nimport {\n  addClass,\n  getScrollBarWidth,\n  getStyle,\n  hasClass,\n  removeClass,\n  throwError,\n} from '@element-plus/utils'\nimport { useNamespace } from '../use-namespace'\n\nimport type { Ref } from 'vue'\n\n/**\n * Hook that monitoring the ref value to lock or unlock the screen.\n * When the trigger became true, it assumes modal is now opened and vice versa.\n * @param trigger {Ref<boolean>}\n */\nexport const useLockscreen = (trigger: Ref<boolean>) => {\n  if (!isRef(trigger)) {\n    throwError(\n      '[useLockscreen]',\n      'You need to pass a ref param to this function'\n    )\n  }\n\n  const ns = useNamespace('popup')\n\n  const hiddenCls = computed(() => ns.bm('parent', 'hidden'))\n\n  if (!isClient || hasClass(document.body, hiddenCls.value)) {\n    return\n  }\n\n  let scrollBarWidth = 0\n  let withoutHiddenClass = false\n  let bodyWidth = '0'\n\n  const cleanup = () => {\n    setTimeout(() => {\n      removeClass(document.body, hiddenCls.value)\n      if (withoutHiddenClass) {\n        document.body.style.width = bodyWidth\n      }\n    }, 200)\n  }\n  watch(trigger, (val) => {\n    if (!val) {\n      cleanup()\n      return\n    }\n\n    withoutHiddenClass = !hasClass(document.body, hiddenCls.value)\n    if (withoutHiddenClass) {\n      bodyWidth = document.body.style.width\n    }\n    scrollBarWidth = getScrollBarWidth(ns.namespace.value)\n    const bodyHasOverflow =\n      document.documentElement.clientHeight < document.body.scrollHeight\n    const bodyOverflowY = getStyle(document.body, 'overflowY')\n    if (\n      scrollBarWidth > 0 &&\n      (bodyHasOverflow || bodyOverflowY === 'scroll') &&\n      withoutHiddenClass\n    ) {\n      document.body.style.width = `calc(100% - ${scrollBarWidth}px)`\n    }\n    addClass(document.body, hiddenCls.value)\n  })\n  onScopeDispose(() => cleanup())\n}\n","import {\n  computed,\n  getCurrentInstance,\n  nextTick,\n  onMounted,\n  ref,\n  watch,\n} from 'vue'\nimport { isClient, useTimeoutFn } from '@vueuse/core'\n\nimport {\n  defaultNamespace,\n  useGlobalConfig,\n  useId,\n  useLockscreen,\n  useZIndex,\n} from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { addUnit } from '@element-plus/utils'\n\nimport type { CSSProperties, Ref, SetupContext } from 'vue'\nimport type { DialogEmits, DialogProps } from './dialog'\n\nexport const useDialog = (\n  props: DialogProps,\n  targetRef: Ref<HTMLElement | undefined>\n) => {\n  const instance = getCurrentInstance()!\n  const emit = instance.emit as SetupContext<DialogEmits>['emit']\n  const { nextZIndex } = useZIndex()\n\n  let lastPosition = ''\n  const titleId = useId()\n  const bodyId = useId()\n  const visible = ref(false)\n  const closed = ref(false)\n  const rendered = ref(false) // when desctroyOnClose is true, we initialize it as false vise versa\n  const zIndex = ref(props.zIndex || nextZIndex())\n\n  let openTimer: (() => void) | undefined = undefined\n  let closeTimer: (() => void) | undefined = undefined\n\n  const namespace = useGlobalConfig('namespace', defaultNamespace)\n\n  const style = computed<CSSProperties>(() => {\n    const style: CSSProperties = {}\n    const varPrefix = `--${namespace.value}-dialog` as const\n    if (!props.fullscreen) {\n      if (props.top) {\n        style[`${varPrefix}-margin-top`] = props.top\n      }\n      if (props.width) {\n        style[`${varPrefix}-width`] = addUnit(props.width)\n      }\n    }\n    return style\n  })\n\n  const overlayDialogStyle = computed<CSSProperties>(() => {\n    if (props.alignCenter) {\n      return { display: 'flex' }\n    }\n    return {}\n  })\n\n  function afterEnter() {\n    emit('opened')\n  }\n\n  function afterLeave() {\n    emit('closed')\n    emit(UPDATE_MODEL_EVENT, false)\n    if (props.destroyOnClose) {\n      rendered.value = false\n    }\n  }\n\n  function beforeLeave() {\n    emit('close')\n  }\n\n  function open() {\n    closeTimer?.()\n    openTimer?.()\n\n    if (props.openDelay && props.openDelay > 0) {\n      ;({ stop: openTimer } = useTimeoutFn(() => doOpen(), props.openDelay))\n    } else {\n      doOpen()\n    }\n  }\n\n  function close() {\n    openTimer?.()\n    closeTimer?.()\n\n    if (props.closeDelay && props.closeDelay > 0) {\n      ;({ stop: closeTimer } = useTimeoutFn(() => doClose(), props.closeDelay))\n    } else {\n      doClose()\n    }\n  }\n\n  function handleClose() {\n    function hide(shouldCancel?: boolean) {\n      if (shouldCancel) return\n      closed.value = true\n      visible.value = false\n    }\n\n    if (props.beforeClose) {\n      props.beforeClose(hide)\n    } else {\n      close()\n    }\n  }\n\n  function onModalClick() {\n    if (props.closeOnClickModal) {\n      handleClose()\n    }\n  }\n\n  function doOpen() {\n    if (!isClient) return\n    visible.value = true\n  }\n\n  function doClose() {\n    visible.value = false\n  }\n\n  function onOpenAutoFocus() {\n    emit('openAutoFocus')\n  }\n\n  function onCloseAutoFocus() {\n    emit('closeAutoFocus')\n  }\n\n  function onFocusoutPrevented(event: CustomEvent) {\n    if (event.detail?.focusReason === 'pointer') {\n      event.preventDefault()\n    }\n  }\n\n  if (props.lockScroll) {\n    useLockscreen(visible)\n  }\n\n  function onCloseRequested() {\n    if (props.closeOnPressEscape) {\n      handleClose()\n    }\n  }\n\n  watch(\n    () => props.modelValue,\n    (val) => {\n      if (val) {\n        closed.value = false\n        open()\n        rendered.value = true // enables lazy rendering\n        zIndex.value = props.zIndex ? zIndex.value++ : nextZIndex()\n        // this.$el.addEventListener('scroll', this.updatePopper)\n        nextTick(() => {\n          emit('open')\n          if (targetRef.value) {\n            targetRef.value.scrollTop = 0\n          }\n        })\n      } else {\n        // this.$el.removeEventListener('scroll', this.updatePopper\n        if (visible.value) {\n          close()\n        }\n      }\n    }\n  )\n\n  watch(\n    () => props.fullscreen,\n    (val) => {\n      if (!targetRef.value) return\n      if (val) {\n        lastPosition = targetRef.value.style.transform\n        targetRef.value.style.transform = ''\n      } else {\n        targetRef.value.style.transform = lastPosition\n      }\n    }\n  )\n\n  onMounted(() => {\n    if (props.modelValue) {\n      visible.value = true\n      rendered.value = true // enables lazy rendering\n      open()\n    }\n  })\n\n  return {\n    afterEnter,\n    afterLeave,\n    beforeLeave,\n    handleClose,\n    onModalClick,\n    close,\n    doClose,\n    onOpenAutoFocus,\n    onCloseAutoFocus,\n    onCloseRequested,\n    onFocusoutPrevented,\n    titleId,\n    bodyId,\n    closed,\n    style,\n    overlayDialogStyle,\n    rendered,\n    visible,\n    zIndex,\n  }\n}\n","<template>\n  <teleport to=\"body\" :disabled=\"!appendToBody\">\n    <transition\n      name=\"dialog-fade\"\n      @after-enter=\"afterEnter\"\n      @after-leave=\"afterLeave\"\n      @before-leave=\"beforeLeave\"\n    >\n      <el-overlay\n        v-show=\"visible\"\n        custom-mask-event\n        :mask=\"modal\"\n        :overlay-class=\"modalClass\"\n        :z-index=\"zIndex\"\n      >\n        <div\n          role=\"dialog\"\n          aria-modal=\"true\"\n          :aria-label=\"title || undefined\"\n          :aria-labelledby=\"!title ? titleId : undefined\"\n          :aria-describedby=\"bodyId\"\n          :class=\"`${ns.namespace.value}-overlay-dialog`\"\n          :style=\"overlayDialogStyle\"\n          @click=\"overlayEvent.onClick\"\n          @mousedown=\"overlayEvent.onMousedown\"\n          @mouseup=\"overlayEvent.onMouseup\"\n        >\n          <el-focus-trap\n            loop\n            :trapped=\"visible\"\n            focus-start-el=\"container\"\n            @focus-after-trapped=\"onOpenAutoFocus\"\n            @focus-after-released=\"onCloseAutoFocus\"\n            @focusout-prevented=\"onFocusoutPrevented\"\n            @release-requested=\"onCloseRequested\"\n          >\n            <el-dialog-content\n              v-if=\"rendered\"\n              ref=\"dialogContentRef\"\n              v-bind=\"$attrs\"\n              :custom-class=\"customClass\"\n              :center=\"center\"\n              :align-center=\"alignCenter\"\n              :close-icon=\"closeIcon\"\n              :draggable=\"draggable\"\n              :fullscreen=\"fullscreen\"\n              :show-close=\"showClose\"\n              :title=\"title\"\n              @close=\"handleClose\"\n            >\n              <template #header>\n                <slot\n                  v-if=\"!$slots.title\"\n                  name=\"header\"\n                  :close=\"handleClose\"\n                  :title-id=\"titleId\"\n                  :title-class=\"ns.e('title')\"\n                />\n                <slot v-else name=\"title\" />\n              </template>\n              <slot />\n              <template v-if=\"$slots.footer\" #footer>\n                <slot name=\"footer\" />\n              </template>\n            </el-dialog-content>\n          </el-focus-trap>\n        </div>\n      </el-overlay>\n    </transition>\n  </teleport>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, provide, ref, useSlots } from 'vue'\nimport { ElOverlay } from '@element-plus/components/overlay'\nimport { useDeprecated, useNamespace, useSameTarget } from '@element-plus/hooks'\nimport { dialogInjectionKey } from '@element-plus/tokens'\nimport ElFocusTrap from '@element-plus/components/focus-trap'\nimport ElDialogContent from './dialog-content.vue'\nimport { dialogEmits, dialogProps } from './dialog'\nimport { useDialog } from './use-dialog'\n\ndefineOptions({\n  name: 'ElDialog',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(dialogProps)\ndefineEmits(dialogEmits)\nconst slots = useSlots()\n\nuseDeprecated(\n  {\n    scope: 'el-dialog',\n    from: 'the title slot',\n    replacement: 'the header slot',\n    version: '3.0.0',\n    ref: 'https://element-plus.org/en-US/component/dialog.html#slots',\n  },\n  computed(() => !!slots.title)\n)\n\nuseDeprecated(\n  {\n    scope: 'el-dialog',\n    from: 'custom-class',\n    replacement: 'class',\n    version: '2.3.0',\n    ref: 'https://element-plus.org/en-US/component/dialog.html#attributes',\n    type: 'Attribute',\n  },\n  computed(() => !!props.customClass)\n)\n\nconst ns = useNamespace('dialog')\nconst dialogRef = ref<HTMLElement>()\nconst headerRef = ref<HTMLElement>()\nconst dialogContentRef = ref()\n\nconst {\n  visible,\n  titleId,\n  bodyId,\n  style,\n  overlayDialogStyle,\n  rendered,\n  zIndex,\n  afterEnter,\n  afterLeave,\n  beforeLeave,\n  handleClose,\n  onModalClick,\n  onOpenAutoFocus,\n  onCloseAutoFocus,\n  onCloseRequested,\n  onFocusoutPrevented,\n} = useDialog(props, dialogRef)\n\nprovide(dialogInjectionKey, {\n  dialogRef,\n  headerRef,\n  bodyId,\n  ns,\n  rendered,\n  style,\n})\n\nconst overlayEvent = useSameTarget(onModalClick)\n\nconst draggable = computed(() => props.draggable && !props.fullscreen)\n\ndefineExpose({\n  /** @description whether the dialog is visible */\n  visible,\n  dialogContentRef,\n})\n</script>\n","import { withInstall } from '@element-plus/utils'\nimport Dialog from './src/dialog.vue'\n\nexport const ElDialog = withInstall(Dialog)\nexport default ElDialog\n\nexport * from './src/use-dialog'\nexport * from './src/dialog'\n","import { isFunction } from '../types'\n\nimport type { ComponentPublicInstance, Ref } from 'vue'\n\nexport type RefSetter = (\n  el: Element | ComponentPublicInstance | undefined\n) => void\n\nexport const composeRefs = (\n  ...refs: (Ref<HTMLElement | undefined> | RefSetter)[]\n) => {\n  return (el: Element | ComponentPublicInstance | null) => {\n    refs.forEach((ref) => {\n      if (isFunction(ref)) {\n        ref(el as Element | ComponentPublicInstance)\n      } else {\n        ref.value = el as HTMLElement | undefined\n      }\n    })\n  }\n}\n","import {\n  Comment,\n  Fragment,\n  Text,\n  createBlock,\n  createCommentVNode,\n  isVNode,\n  openBlock,\n} from 'vue'\nimport { camelize, isArray } from '@vue/shared'\nimport { hasOwn } from '../objects'\nimport { debugWarn } from '../error'\nimport type {\n  VNode,\n  VNodeArrayChildren,\n  VNodeChild,\n  VNodeNormalizedChildren,\n} from 'vue'\n\nconst SCOPE = 'utils/vue/vnode'\n\nexport enum PatchFlags {\n  TEXT = 1,\n  CLASS = 2,\n  STYLE = 4,\n  PROPS = 8,\n  FULL_PROPS = 16,\n  HYDRATE_EVENTS = 32,\n  STABLE_FRAGMENT = 64,\n  KEYED_FRAGMENT = 128,\n  UNKEYED_FRAGMENT = 256,\n  NEED_PATCH = 512,\n  DYNAMIC_SLOTS = 1024,\n  HOISTED = -1,\n  BAIL = -2,\n}\n\nexport type VNodeChildAtom = Exclude<VNodeChild, Array<any>>\nexport type RawSlots = Exclude<\n  VNodeNormalizedChildren,\n  Array<any> | null | string\n>\n\nexport function isFragment(node: VNode): boolean\nexport function isFragment(node: unknown): node is VNode\nexport function isFragment(node: unknown): node is VNode {\n  return isVNode(node) && node.type === Fragment\n}\n\nexport function isText(node: VNode): boolean\nexport function isText(node: unknown): node is VNode\nexport function isText(node: unknown): node is VNode {\n  return isVNode(node) && node.type === Text\n}\n\nexport function isComment(node: VNode): boolean\nexport function isComment(node: unknown): node is VNode\nexport function isComment(node: unknown): node is VNode {\n  return isVNode(node) && node.type === Comment\n}\n\nconst TEMPLATE = 'template'\nexport function isTemplate(node: VNode): boolean\nexport function isTemplate(node: unknown): node is VNode\nexport function isTemplate(node: unknown): node is VNode {\n  return isVNode(node) && node.type === TEMPLATE\n}\n\n/**\n * determine if the element is a valid element type rather than fragments and comment e.g. <template> v-if\n * @param node {VNode} node to be tested\n */\nexport function isValidElementNode(node: VNode): boolean\nexport function isValidElementNode(node: unknown): node is VNode\nexport function isValidElementNode(node: unknown): node is VNode {\n  return isVNode(node) && !isFragment(node) && !isComment(node)\n}\n\n/**\n * get a valid child node (not fragment nor comment)\n * @param node {VNode} node to be searched\n * @param depth {number} depth to be searched\n */\nfunction getChildren(\n  node: VNodeNormalizedChildren | VNodeChild,\n  depth: number\n): VNodeNormalizedChildren | VNodeChild {\n  if (isComment(node)) return\n  if (isFragment(node) || isTemplate(node)) {\n    return depth > 0 ? getFirstValidNode(node.children, depth - 1) : undefined\n  }\n  return node\n}\n\nexport const getFirstValidNode = (\n  nodes: VNodeNormalizedChildren,\n  maxDepth = 3\n) => {\n  if (Array.isArray(nodes)) {\n    return getChildren(nodes[0], maxDepth)\n  } else {\n    return getChildren(nodes, maxDepth)\n  }\n}\n\nexport function renderIf(\n  condition: boolean,\n  ...args: Parameters<typeof createBlock>\n) {\n  return condition ? renderBlock(...args) : createCommentVNode('v-if', true)\n}\n\nexport function renderBlock(...args: Parameters<typeof createBlock>) {\n  return openBlock(), createBlock(...args)\n}\n\nexport const getNormalizedProps = (node: VNode) => {\n  if (!isVNode(node)) {\n    debugWarn(SCOPE, '[getNormalizedProps] must be a VNode')\n    return {}\n  }\n\n  const raw = node.props || {}\n  const type = (isVNode(node.type) ? node.type.props : undefined) || {}\n  const props: Record<string, any> = {}\n\n  Object.keys(type).forEach((key) => {\n    if (hasOwn(type[key], 'default')) {\n      props[key] = type[key].default\n    }\n  })\n\n  Object.keys(raw).forEach((key) => {\n    props[camelize(key)] = raw[key]\n  })\n\n  return props\n}\n\nexport const ensureOnlyChild = (children: VNodeArrayChildren | undefined) => {\n  if (!isArray(children) || children.length > 1) {\n    throw new Error('expect to receive a single Vue element child')\n  }\n  return children[0]\n}\n\nexport type FlattenVNodes = Array<VNodeChildAtom | RawSlots>\n\nexport const flattedChildren = (\n  children: FlattenVNodes | VNode | VNodeNormalizedChildren\n): FlattenVNodes => {\n  const vNodes = isArray(children) ? children : [children]\n  const result: FlattenVNodes = []\n\n  vNodes.forEach((child) => {\n    if (isArray(child)) {\n      result.push(...flattedChildren(child))\n    } else if (isVNode(child) && isArray(child.children)) {\n      result.push(...flattedChildren(child.children))\n    } else {\n      result.push(child)\n      if (isVNode(child) && child.component?.subTree) {\n        result.push(...flattedChildren(child.component.subTree))\n      }\n    }\n  })\n  return result\n}\n"],"names":["useSameTarget","handleClick","onClick","NOOP","onMousedown","onMouseup","mousedownTarget","mouseupTarget","e","target","currentTarget","overlayProps","buildProps","mask","type","Boolean","default","customMaskEvent","overlayClass","definePropType","String","Array","Object","zIndex","Number","overlayEmits","click","evt","MouseEvent","defineComponent","name","props","emits","setup","slots","emit","ns","useNamespace","onMaskClick","createVNode","class","b","style","renderSlot","PatchFlags","h","position","top","right","bottom","left","ElOverlay","Overlay","dialogContentProps","center","alignCenter","closeIcon","iconPropType","customClass","draggable","fullscreen","showClose","title","dialogContentEmits","close","dialogInjectionKey","Symbol","useDraggable","targetRef","dragRef","transform","offsetX","offsetY","downX","clientX","downY","clientY","targetRect","value","getBoundingClientRect","targetLeft","targetTop","targetWidth","width","targetHeight","height","clientWidth","document","documentElement","clientHeight","minLeft","minTop","maxLeft","maxTop","onMousemove","e2","moveX","Math","min","max","moveY","addUnit","removeEventListener","addEventListener","onDraggable","offDraggable","onMounted","watchEffect","onBeforeUnmount","t","useLocale","Close","dialogRef","headerRef","bodyId","inject","focusTrapRef","FOCUS_TRAP_INJECTION_KEY","composedDialogRef","composeRefs","dialogProps","appendToBody","beforeClose","Function","destroyOnClose","closeOnClickModal","closeOnPressEscape","lockScroll","modal","openDelay","closeDelay","modelValue","modalClass","trapFocus","dialogEmits","open","opened","closed","UPDATE_MODEL_EVENT","isBoolean","openAutoFocus","closeAutoFocus","useLockscreen","trigger","isRef","throwError","hiddenCls","computed","bm","isClient","hasClass","body","scrollBarWidth","withoutHiddenClass","bodyWidth","cleanup","setTimeout","removeClass","watch","val","getScrollBarWidth","namespace","bodyHasOverflow","scrollHeight","bodyOverflowY","getStyle","addClass","onScopeDispose","useDialog","instance","getCurrentInstance","nextZIndex","useZIndex","lastPosition","titleId","useId","visible","ref","rendered","openTimer","closeTimer","useGlobalConfig","defaultNamespace","style2","varPrefix","overlayDialogStyle","display","afterEnter","afterLeave","beforeLeave","stop","useTimeoutFn","doOpen","doClose","handleClose","hide","shouldCancel","onModalClick","onOpenAutoFocus","onCloseAutoFocus","onFocusoutPrevented","event","_a","detail","focusReason","preventDefault","onCloseRequested","nextTick","scrollTop","inheritAttrs","useSlots","useDeprecated","scope","from","replacement","version","dialogContentRef","provide","overlayEvent","expose","ElDialog","withInstall","Dialog","refs","el","forEach","isFunction","PatchFlags2","flattedChildren","children","vNodes","isArray","result","child","push","isVNode","component","subTree"],"sourceRoot":""}